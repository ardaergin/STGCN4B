#!/bin/bash

#SBATCH --partition=gpu_h100
#SBATCH --gpus=2
#SBATCH --job-name=stgcn
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=9
#SBATCH --mem=64G
#SBATCH --time=01:00:00
#SBATCH --output=output/forecasting/slurm_output_%A.out
#SBATCH --error=output/forecasting/slurm_error_%A.err

export OUTPUT_DIR=output/forecasting/stgcn_${SLURM_JOB_ID}
mkdir -p $OUTPUT_DIR

# Load modules
module purge
module load 2023
module load Python/3.11.3-GCCcore-12.3.0
module load CUDA/12.1.1
module load cuDNN/8.9.2.26-CUDA-12.1.1
module load PyTorch/2.1.2-foss-2023a-CUDA-12.1.1
module load Python-bundle-PyPI/2023.06-GCCcore-12.3.0
module load matplotlib/3.7.2-gfbf-2023a
module load scikit-learn/1.3.1-gfbf-2023a

# Install missing packages if needed
python -c "import torch-geometric" 2>/dev/null || pip install --user torch-geometric \
  torch-scatter torch-sparse torch-cluster torch-spline-conv \
  -f https://data.pyg.org/whl/torch-2.1.0+cu121.html
python -c "import torch-geometric-temporal" 2>/dev/null || pip install --user torch-geometric-temporal
python -c "import rdflib" 2>/dev/null || pip install --user rdflib
python -c "import holidays" 2>/dev/null || pip install --user holidays
python -c "import shapely" 2>/dev/null || pip install --user shapely
python -c "import tqdm" 2>/dev/null || pip install --user tqdm

# Set PyTorch optimization flags
export PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:128
export NCCL_DEBUG=INFO

# Move into your project directory (safety)
cd $HOME/eSTGNN

# Create directories on scratch space
mkdir -p $TMPDIR/data/processed


##### Dynamically copying the required file to scratch #####
echo "Determining required data file..."
REQUIRED_FILE=$(srun python -m src.utils.get_data_filename "$@")

# Checking if it returned a filename
if [ -z "$REQUIRED_FILE" ]; then
    echo "ERROR: Helper script could not determine a filename from the arguments."
    exit 1
fi

# Define the full source and destination paths
SOURCE_PATH="$HOME/eSTGNN/data/processed/$REQUIRED_FILE"
DEST_PATH="$TMPDIR/data/processed/$REQUIRED_FILE"

# Checking if the required file actually exists before trying to copy
if [ ! -f "$SOURCE_PATH" ]; then
    echo "ERROR: Required data file not found at: $SOURCE_PATH"
    exit 1
fi

# Copying the required file to scratch
echo "Copying required file '$REQUIRED_FILE' to scratch space..."
cp "$SOURCE_PATH" "$DEST_PATH"

# Final check
if [ ! -f "$DEST_PATH" ]; then
    echo "ERROR: Failed to copy '$REQUIRED_FILE' to scratch space."
    exit 1
fi
##### Dynamically copying the required file to scratch #####


# Set directories
export DATA_DIR=$TMPDIR/data

echo "Starting training with data from $DATA_DIR"
echo "Results will be saved to $OUTPUT_DIR"

# Run script pointing to scratch
srun python -m src.models.STGCN4B.homogeneous.train \
  --data_dir $DATA_DIR \
  --output_dir $OUTPUT_DIR \
  --enable_cuda \
  "$@"

echo "Cleaning up scratch space..."
rm -rf $TMPDIR/data

echo "Job completed successfully!"